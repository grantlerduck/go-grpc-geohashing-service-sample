syntax = "proto3";

package api.v1;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/grntlduck-cloud/go-grpc-geohasing-service-sample/adapter/grpc/poiv1";

message PoI { 
  string id = 1;                          // UUIDv4 
  Coordinate coordinate = 2;              // the center of the PoI as WGS coordinate optional 
  Coordinate entrance = 3;                // the road entrance WGS coordinate 
  Address address = 4;                    // the address of the PoI 
  repeated string features = 5;           // list of features as free text, e,g. toilet, restaurant, gas stattion, ...  
}
  
message Coordinate {
  double longitude = 1;
  double latitude = 2;
}

message Address {
  string street = 1;
  string street_number = 2;               // eg. 11, 13b,   
  uint32 zip_code = 3;
  string city = 4;
  string country = 5;
}

message GetPoIRequest {
  string id = 1;
}

message GetPoIResponse {
  PoI poi = 1;
}

message GetPoIsInProximityRequest {
  Coordinate center = 1;
}

message PoIListResponse {
  repeated PoI pois = 1;
}

message GetPoIsAlongRouteRequest {
  repeated Coordinate route = 1;
}

// see https://github.com/grpc-ecosystem/grpc-gateway
service PoIQueryInfo {
  rpc GetPoI (GetPoIRequest) returns (GetPoIResponse) {
    option (google.api.http) = {
      get: "/api/v1/pois/info/{id}"
    };
  };
  rpc GetPoIsInProximity (GetPoIsInProximityRequest) returns (PoIListResponse) {
    option (google.api.http) = {
      get: "/api/v1/pois/proximity"
    };
  };
  rpc PoISearchAlongRoute (GetPoIsAlongRouteRequest) returns (PoIListResponse) {
    option (google.api.http) = {
      post: "/api/v1/pois/route"
    }; 
  };
}

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "gRPC-Gateway PoI Info Service API definition";
    version: "1.0";
    description: "Swagger API of the gRPC-Gateway Service for PoI search (route, proximity) and info. Transcodes REST (HTTP/JSON) to gRPC allowing consumption by REST clients."
    contact: {
      name: "gRPC Go Sample Project";
      url: "https://github.com/grntlrduck-cloud/go-grpc-geohashing-service-sample";
    };
    license: {
      name: "Apache-2.0 license";
      url: "https://github.com/grntlrduck-cloud/go-grpc-geohashing-service-sample/blob/main/LICENSE";
    };
  };
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  security_definitions: {
    security: {
      key: "OAuth2";
      value: {
        type: TYPE_OAUTH2;
        flow: FLOW_ACCESS_CODE;
        authorization_url: "https://example.com/oauth/authorize"; // TODO
        token_url: "https://example.com/oauth/token"; // TODO
        scopes: {
          scope: {
            key: "pois.read";
            value: "Grants read access to poi resources";
          }
        }
      }
    }
  }
  security: {
    security_requirement: {
      key: "OAuth2";
      value: {
        scope: "pois.read";

      }
    }
  }
  responses: {
    key: "403";
    value: {
      description: "Returned when the user does not have permission to access the resource.";
      schema: {}
    }
  }
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {}
    }
  }
  responses: {
    key: "500";
    value: {
      description: "Server error";
      schema: {};
    }
  }
};
